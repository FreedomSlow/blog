<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://freedomslow.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://freedomslow.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-10T20:42:33+00:00</updated><id>https://freedomslow.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">Do you really want to be a Data Scientist?</title><link href="https://freedomslow.github.io/blog/2024/wanna-be-ds/" rel="alternate" type="text/html" title="Do you really want to be a Data Scientist?"/><published>2024-03-09T22:25:00+00:00</published><updated>2024-03-09T22:25:00+00:00</updated><id>https://freedomslow.github.io/blog/2024/wanna-be-ds</id><content type="html" xml:base="https://freedomslow.github.io/blog/2024/wanna-be-ds/"><![CDATA[<p>With all the recent hype around LLM-s like ChatGPT and Gemini, it seems that now every company feels an obligation to add <strong>magical AI</strong> to every product they launch, announce it in the ad campaign and this will guarantee the imminent success. Look at <a href="https://news.samsung.com/us/new-food-ai-looks-inside-fridge-help-find-perfect-things-cook-already/">this fridge</a>, for example.</p> <p>And as you well know, when there’s an increasing demand on the market, there should also be an increasing supply. Thus, more than ever I see people trying to get into the field, thinking they will change the world with some sort of SkyNet.</p> <p>The unfortunate truth is that no, most likely you will not work on the state of the art (SOTA) systems, that can paint, look for information and code better that these puni humans. And even if you will - this will be only 20% of your work. Is this that sad? - I hope here, in what can be perhaps called a letter to the past self, you will find your answer.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/wanna_be_ds/despair-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/wanna_be_ds/despair-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/wanna_be_ds/despair-1400.webp"/> <img src="/assets/img/wanna_be_ds/despair.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="d-for-data">D for Data</h3> <p>What makes any Data Scientist happy and full of excitement? Data. Lots of it. The more, the better.</p> <p>But Data is very shy, and she always takes her best friend Data Errors with her, and let me tell you, this friend is pretty annoying: unique ID-s become not that unique, timestamps jump as if they are in the new Doctor Who season, the same user can be a man, woman or a bear, and competitor prices lose their value quicker than <a href="https://en.wikipedia.org/wiki/Zimbabwean_dollar">Zimbabwean dollar</a>.</p> <p>And somebody has to find all of these errors and decide how to deal with them. Because sometimes, during a casual conversation over the lunch with the friendly backend engineer, you’ll discover that “Oh yeah, ID-s could be not unique if the platforms are different. But we’ve changed this two and a half years ago, why do you ask?”. And he will never know how many hours you spent chasing this…</p> <p>Sorry, I digressed a bit. This is the kind of work you’ll have to deal with most of the time - find the data, start looking at it, find more and more issues, and then try to collect little dusts of information in order to resolve them. And this is actually quite an optimistic scenario, when you have the data, and you can easily find and/or access it. Quite often you’ll have to collect it yourself: either try to find some open datasets, which will rarely fit your specific case, or write everything yourself, or, even worse, ask help from software and data engineers, but you know, they have their <a href="https://www.youtube.com/watch?v=DYvhC_RdIwQ">own shit to deal with</a>.</p> <p>Many people can’t withstand this, so they quit or go insane.</p> <h3 id="first-rule-of-machine-learning-start-without-machine-learning">First rule of Machine Learning: start without Machine Learning</h3> <p>People give problems for Data Scientists to get a result - probably some uplift in product metric. And more often than not, nobody really cares how exactly you’ve done this, except for maybe a couple of your colleagues and friends. I think here lies the main difference between mature specialist and the one who only started one’s journey.</p> <p>Rational and tired of the life, the universe and everything senior will extract and manipulate the data in every imaginable way, read couple papers and articles (if they even exist), talk to business to understand what exactly is needed; and in 90% of the cases will solve a problem without ever using these famous neural networks, that would have probably eaten up entire yearly budget with AWS GPU instances.</p> <p>The solution itself most likely won’t be sophisticated and could be understood and implemented by every other deep learning 101 graduate. But as one of the best programmers <a href="https://www.goodreads.com/quotes/10480697-an-idiot-admires-complexity-a-genius-admires-simplicity-a-physicist">once said</a>: “Idiot admires complexity, a genius admires simplicity”, and if you want to be a data scientist - always remember that, the value is almost never in the use of some SOTA architecture. In one of the companies that I’ve worked with the whole ad bidding optimisation consisted of four <code class="language-plaintext highlighter-rouge">if</code> statements, and that haven’t stopped them from successfully scaling for 4 years.</p> <p>Btw, did you spend countless hours learning different machine learning techniques? Yeah, half of the time you won’t need them too… Many problems that regular business driven data scientists work with can be solved by using heuristics, linear optimisation, simple statistics methods and so on. And more importantly, you’ve probably interacted with them for many years and didn’t even know about it: for example I bet you’ve listened to Spotify recommendations, and one of the <a href="https://erikbern.com/2015/10/01/nearest-neighbors-and-vector-models-part-2-how-to-search-in-high-dimensional-spaces.html">core algorithms</a> there has no <strong>magical AI</strong>, just simple math and programming that could be understood by most of the high-schoolers.</p> <p>Many people want to create “the next big thing” that everybody on Twitter will talk about, and when they don’t, they get disappointed and leave.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/wanna_be_ds/fight_club-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/wanna_be_ds/fight_club-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/wanna_be_ds/fight_club-1400.webp"/> <img src="/assets/img/wanna_be_ds/fight_club.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="math-and-professional-growth">Math and professional growth</h3> <p>No matter what some people say (including me in the previous section), but DS without math is like a database without indices. Only the fact that the whole area has just separated from probability theory and statistics can already tell you a lot. Every sophisticated and impressive system that you see out there: ChatGPT, StableDiffusion, AlphaZero etc. - is just a large probability machine, that consists of ten-ish basic math operations and concepts. And the sad truth is the more math you know, the less impressive the whole AI thing is to you, but I guess it’s like that with everything else.</p> <p>Machine and especially deep learning is a relatively young and now highly competitive area. For that reason things move quickly here, and if you want to be demanded on the market, you’ll have to follow recent developments, even if you’ll never apply them in your work. That’s just an unfortunate reality of the interview process that we have here: software engineers have, IMHO useless, Leetcode, and we have this. And I think it’s not that different from, lets say, medicine. I’m also not saying that other guys in other areas don’t have to develop, but I’d say that significant changes to the C++ standard are made not that frequently.</p> <p>Professional growth is a very tricky thing, I think. I can’t really give you a list what does mid-level DS have to have in order not to be a junior, and the same thing goes for senior vs middle. Looking at how people torment candidates during interviews with all the technical and theoretical questions, I just convince myself even more. Moreover, sometimes it happens that some undergrad, who has never seen a production codebase, knows theory better that interviewers :)</p> <p>The only thing that I can think of is the same that guys in game-dev have - number of projects (models) that have been launched to production. And maybe the pragmatism while solving problems - that includes understanding of the exact problem business is trying to address and how you can simplify the problem without damaging the result.</p> <p>Here I was talking mostly about regular “product based” DS. There is, of course, an alternative path: you can become an established expert in some area e.g. generative model in NLP and/or CV. But then sooner or later you’ll have to work either in research, or in enormous corporations. We’ll talk about this later.</p> <h3 id="how-to-enter-the-field">How to enter the field?</h3> <p>So you’ve got to this section even after all my grumbling, huh? I guess nothing can stop you now, so it’s time to talk how you can get a job.</p> <p>What can I say, even for people from adjacent areas, that are not connected to data, it will be difficult. Of course, there are some notable exceptions, like always: I personally know couple very strong and cool data scientists who started as developers, but they started when neural networks were shallow and dinosaurs were still alive. For many roles the domain knowledge is crucial - after all, you wouldn’t trust an autopilot design to some random bloke, who has never seen data from cameras, would you? In that case we would have had much more situations like <a href="https://www.youtube.com/shorts/vQG2ikUeh_c">this one</a>.</p> <p>Juniors. It will be really tough, especially in this economy. You probably have already noticed that small companies and startups rarely have any openings. That’s pretty understandable: they have to develop business and there’s sadly no tasks, time and/or money to support junior lvl specialists. Large companies, like FAANG or consultancy agencies can afford themselves to invest into DS beginners. But there is a catch - <del>catch 22</del> the competition is fierce, and these companies often prefer people with PhD-s and that’s especially noticeable in US. I attribute this, if you want to call it elitism, to the fact that the field was built on shoulders of giants - quite often famous mathematicians, statisticians and other researchers.</p> <p>If you want to become an independent specialist and strong individual contributor, my advice is to go to work in some data consultancy (not shitshow like mckinsey &amp; co.) - you’ll work with various tech stacks and business domains, the work-life balance is almost never good in these types of companies, but you’ll grow quickly, if you’ll survive, of course.</p> <h3 id="you-will-never-build-skynet">You will never build SkyNet</h3> <p>I vividly remember the moment I understood that I want to become a data scientist. It was right after DeepMind’s <a href="https://www.youtube.com/watch?v=WXuK6gekU1Y&amp;t=4585s">AlphaGo</a> made a breakthrough by winning the match against world Go champion. If in the case of chess, humanity pretty much lost all the chances of winning in mid 00s, the game of Go, on the other hand had so many possible moves that cold-blooded machine simply got lost during its computation. Some people predicted, that we will have the necessary computational power only in 2040-s at best. And then, out of nowhere this bunch of scientist comes out of nowhere with their neural networks and crushes the competition. Incredible, isn’t it?</p> <p>Nowadays, the next big thing are large language models (LLM) - users mesmerisingly look at their screens and see the companion that is more intelligent as most of them (well, <a href="https://www.youtube.com/watch?v=e_HSA1lUd04">almost</a>) and all the hype and advertising only adds to this.</p> <p>But the sobering truth is that most of us will never create models that will be mentioned during the debates in EU parliament, or even on hacker news. Most of us will use our experience and knowledge to solve very particular business problems: starting from optimal packing to save money on the carton boxes, and ending on the click-through rate improvements for mobile ads that we all hate.</p> <p>But if you are really determined and want to change this world for the best, you should go work in a research team, likely in some enormous corporation, that can afford to have teams and computational power to develop things that don’t yield any immediate profit, just so they can have a chance to dominate the field and humanity at some point in the future. Look at OpenAI with their investments from Microsoft, no profit and still evaluation of 29B. Yes, these companies are on the cutting edge of the field, and they release models that are exciting to write and read about, but then you will most likely have to have a very strong academical background, study a lot and focus on some specific area just so you can be a part of these teams and be a co-author on one of the papers (if management allows to publish one).</p> <p>Very simple analogy comes to mind: the vast majority of developers don’t create new programming languages or sophisticated highly-optimised libraries, they implement product features and solve whichever business task they have on their Jira board. Is it bad? - I don’t think so, everybody chooses their own path that yields most satisfaction.</p> <h3 id="tech-stack">Tech stack</h3> <p>Python has been a standard for many years now, and I’d reckon it’ll never go anywhere. I know, all the “hardcore” systems languages fans will say that’s not even a proper programming language, but for most of the data scientists language is just a tool that helps to solve a problem, and Python is perfect for that. I know very few people in out field that write code just for the sake of juggling memory addresses around, even being one of them :) And even if they do like this kind of stuff, they probably do this at their spare time and with something more suitable and enjoyable, like Rust.</p> <p>I also think, that now there are almost no positions where DS just sits quietly in the corner and trains isolated models in our favourite <a href="https://jupyter.org/">Jupyter</a>. Because how vast modern models are, even the most hard-core researches have to write and deploy some type of production code.</p> <p>In case you work with product, you will more often than not write full services: from the ETL pipeline to the model inference and their communication with other services with some sort of API. There’s nothing wrong or scary about it, in my opinion actually, every good senior, regardless of their specialty, should be able to do multiple things poorly and at least one thing well. Sometimes you’ll find yourself writing frontend code because stakeholders asked for it, and it’s three times quicker than waiting for engineers to do it.</p> <p>Most of the time you’ll use external libraries and technologies, most of which are developed and maintained by the aforementioned soulless corporations. There is already 1001 service to orchestrate, provision and deploy your models, why develop another one?</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/wanna_be_ds/perfect_girl-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/wanna_be_ds/perfect_girl-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/wanna_be_ds/perfect_girl-1400.webp"/> <img src="/assets/img/wanna_be_ds/perfect_girl.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="working-with-people">Working with people</h3> <p>Regardless of whether you’re doing research or solve business tasks, you almost certainly won’t do it alone. Researchers work in teams, so it’s expected for you to have various discussions of newly published <a href="https://arxiv.org/">arxiv</a> papers, brainstorms and so on.</p> <p>Data scientists that work with product also can’t do it themselves. Even if you are the only DS working on the project, chances are you won’t know anything about it at the beginning. For example, do you know much about oversees container logistics? - and you’ll have to optimise purchasing to minimise the costs involved; or how what are the stages of an ore enrichment? - here computer vision can save literal billions. That’s why you’ll talk to the managers, field workers, logistics specialists and any other person, who works with it every day. Perhaps you’ll even visit the warehouse or factory. And there’s no escape from it, otherwise you won’t understand enough to adequately solve the problem.</p> <p>Some people get annoyed by this part of the job, some people like it, but the fact is that significant share of your workday will be spent just talking to people, especially at the beginning of the project.</p> <h3 id="why-do-you-need-it-at-all-then">Why do you need it at all then?</h3> <p>As for money, DS, like any other IT specialist, will not earn gold mountains in hiring. Salaries comparable to software engineers, maybe a little higher. The enterprise pays more than a regular product company. Startups pay less, but there is a chance to make money on a share in the company. Now this option is quite plausible, because everyone wants an AI for themselves.</p> <p>They say that altruism is inherently selfish, but I love my job because I can make people’s work and sometimes life easier. The fact that it’s often done without <strong>AI magic</strong> is not a huge disappointment, at least for me. And additionally every problem is unique in its own way and that adds constant excitement and challenge.</p> <p>See you in the next one!</p>]]></content><author><name></name></author><category term="mics,"/><category term="career"/><category term="mics,"/><category term="career"/><summary type="html"><![CDATA[With all the recent hype around LLM-s like ChatGPT and Gemini, it seems that now every company feels an obligation to add magical AI to every product they launch, announce it in the ad campaign and this will guarantee the imminent success. Look at this fridge, for example.]]></summary></entry><entry><title type="html">How to find a girlfriend (or a boyfriend) using Neural Networks</title><link href="https://freedomslow.github.io/blog/2023/tinder-ai/" rel="alternate" type="text/html" title="How to find a girlfriend (or a boyfriend) using Neural Networks"/><published>2023-12-19T22:25:00+00:00</published><updated>2023-12-19T22:25:00+00:00</updated><id>https://freedomslow.github.io/blog/2023/tinder-ai</id><content type="html" xml:base="https://freedomslow.github.io/blog/2023/tinder-ai/"><![CDATA[<p>Once, I had a long weekend with nothing to do. After bingewatching <strong>Friends</strong> for the 100th time I needed something to overcome the boredom. It’s worth to mention that I was aggressively single back then, so I registered on <a href="https://tinder.com">Tinder</a>, created profile and started swiping. That turned out to be incredibly dull though, so my mind drifted off, and somehow I pressed <code class="language-plaintext highlighter-rouge">cmd+r</code> on my keyboard, which, of course, made the page reload. What I found interesting, is that it took forever to load the page; firstly, I blamed this on the german internet, but quick pinging to the closest CDN server showed that my network speed was fine (at least by the german standards). Naturally, I had to understand what caused the pageload to be so slow.</p> <p>By the looks of it, web version of tinder is an <a href="https://en.wikipedia.org/wiki/Single-page_application">SPA</a>, so it might load a ton of content, but what content is that exactly? Couple of images and some text can’t possibly take that long, even with all the modern frontend over-engineering.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tinder_ai/tinder_preview-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tinder_ai/tinder_preview-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tinder_ai/tinder_preview-1400.webp"/> <img src="/assets/img/tinder_ai/tinder_preview.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> This is how tinder web interface looks like </div> <p>Needless to say, I opened dev console and started looking at network requests. And one particular request has caught my eye, it took the longest to execute, here it is</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tinder_ai/console_blurred-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tinder_ai/console_blurred-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tinder_ai/console_blurred-1400.webp"/> <img src="/assets/img/tinder_ai/console_blurred.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> API response </div> <p>So to retrieve profiles info: photos, descriptions and many other fields, frontend makes an API call to <code class="language-plaintext highlighter-rouge">api.gotinder.com/v2/recs/core</code> endpoint, which returns a full profile info not for one, but for more than 10 profiles for one call. I reckon that’s done to provide smoother user experience. You can see that photos are retrieved from <code class="language-plaintext highlighter-rouge">images-ssl.gotinder.com</code> and they are publicly accessible, you just need to know the exact photo ID to retrieve them.</p> <p>To test this, I opened good old Postman and sent the test request, which to my excitement worked flawlessly. One thing that’s worth to mention: each request requires an X-Auth token, which you can find in the same request headers. Just copy this string and store it somewhere</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tinder_ai/postman_blurred-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tinder_ai/postman_blurred-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tinder_ai/postman_blurred-1400.webp"/> <img src="/assets/img/tinder_ai/postman_blurred.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Testing API with postman </div> <p><strong>Note:</strong> Token expires with the session, and while writing this, I’m not sure what is necessary to have the same session running</p> <p>And now, obvious and attractive idea popped up into my head: if one can parse tinder that easily, the exhausting task of finding love can be surely automized with just two Neural Networks, and I can go back to re-watching all my favourite TV-series from the 00-s, not worrying about my love life anymore, while the heartless machine does all the work for me.</p> <p>As I’m not paid hourly here, there’s no need to create anything complex and over-engineered to sell it as “scalable and fault-tolerant”, so I tried to keep the design pretty simple: one could easily run it locally or using VM with GPU</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tinder_ai/architecture-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tinder_ai/architecture-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tinder_ai/architecture-1400.webp"/> <img src="/assets/img/tinder_ai/architecture.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Swipy architecture </div> <p>I generally like to give projects names, it makes me care about them a little bit more, let’s call this one Swipy.</p> <h2 id="get-user-profiles-from-tinder">Get user profiles from tinder</h2> <p>To parse the data we need to write a simple API interface that will get all the profile meta info. But first, let’s take a closer look at the API response and try to get all the fields that might help us find the significant other. I found useful:</p> <ul> <li>user_id</li> <li>distance to the user in miles</li> <li>name</li> <li>bio - text description</li> <li>birthdate</li> <li>gender</li> <li>job description</li> <li>education description</li> </ul> <p>And here is the <code class="language-plaintext highlighter-rouge">UserProfile</code> class that will store all of this, there is also a helper <code class="language-plaintext highlighter-rouge">bio_to_dict</code> method that will be useful later. Btw you can find all the source code <a href="https://github.com/FreedomSlow/tinder_swiper">here</a>):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserProfile</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">api</span><span class="p">:</span> <span class="n">tinderAPI</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">api</span> <span class="o">=</span> <span class="n">api</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_parse_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_parse_data</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">]</span>
        <span class="c1"># Convert miles to units that normal people use
</span>        <span class="n">self</span><span class="p">.</span><span class="n">distance</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">distance_mi</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">/</span> <span class="n">KM_IN_MILES</span>

        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Unknown</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">photos</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">photo</span><span class="p">:</span> <span class="n">photo</span><span class="p">[</span><span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">],</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">photos</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">bio</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">bio</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">birth_date</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">birth_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">strptime</span><span class="p">(</span>
                <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">birth_date</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">%Y-%m-%dT%H:%M:%S.%fZ</span><span class="sh">"</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">birth_date</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Male</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Female</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Unknown</span><span class="sh">"</span><span class="p">][</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">gender</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span>
            <span class="nf">map</span><span class="p">(</span>
                <span class="k">lambda</span> <span class="n">job</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">job</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">),</span>
                    <span class="sh">"</span><span class="s">company</span><span class="sh">"</span><span class="p">:</span> <span class="n">job</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">company</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">)},</span>
                <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">schools</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">school</span><span class="p">:</span> <span class="n">school</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">schools</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])))</span>

    <span class="k">def</span> <span class="nf">bio_to_dict</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">bio</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">bio</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="nf">relativedelta</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">today</span><span class="p">(),</span> <span class="n">self</span><span class="p">.</span><span class="n">birth_date</span><span class="p">).</span><span class="n">years</span><span class="p">)</span>
        <span class="p">}</span>
</code></pre></div></div> <p>Attentive reader might notice that <code class="language-plaintext highlighter-rouge">UserProfile</code> constructor expects <code class="language-plaintext highlighter-rouge">tinderAPI</code> - it is the API interface class. For now, it’ll have only methods to retrieve profiles, but we’ll extend it later:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">tinderAPI</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">token</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://api.gotinder.com</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_token</span> <span class="o">=</span> <span class="n">token</span>
        <span class="n">self</span><span class="p">.</span><span class="n">api_url</span> <span class="o">=</span> <span class="n">api_url</span>

    <span class="k">def</span> <span class="nf">create_profile</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">api_url</span><span class="si">}</span><span class="s">/v2/profile?include=account%2Cuser</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">X-Auth-Token</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_token</span><span class="p">}</span>
        <span class="p">).</span><span class="nf">json</span><span class="p">()</span>
        <span class="k">return</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">],</span> <span class="n">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_profiles</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">api_url</span><span class="si">}</span><span class="s">/v2/recs/core</span><span class="sh">"</span><span class="p">,</span> 
            <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">X-Auth-Token</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_token</span><span class="p">}</span>
        <span class="p">).</span><span class="nf">json</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">user</span><span class="p">:</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">],</span> <span class="n">self</span><span class="p">),</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">results</span><span class="sh">"</span><span class="p">]))</span>
</code></pre></div></div> <p>It’s a known fact, that we decide whether we like the person or not in the first 15 seconds that we see them. So for Swipy to be as superficial and ignorant as we are, we have to retrieve the photos as well. Let’s extend <code class="language-plaintext highlighter-rouge">UserProfile</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">download_photos</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">image_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">sleep_for</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">already_downloaded</span><span class="p">:</span> <span class="nb">set</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">already_downloaded</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="nb">id</span> <span class="ow">in</span> <span class="n">already_downloaded</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">already_downloaded</span>
    <span class="k">if</span> <span class="n">already_downloaded</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">already_downloaded</span> <span class="o">=</span> <span class="p">{</span><span class="n">self</span><span class="p">.</span><span class="nb">id</span><span class="p">}</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">already_downloaded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">ind</span><span class="p">,</span> <span class="n">image_url</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">photos</span><span class="p">):</span>
        <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">image_url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">image_dir</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">ind</span><span class="si">}</span><span class="s">.jpeg</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

        <span class="c1"># Necessary to aviod the ban-hammer
</span>        <span class="nf">sleep</span><span class="p">(</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">sleep_for</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">already_downloaded</span>
</code></pre></div></div> <p>As one profile might (and probably should) have more than one photo, we will index them before saving. Also, recommendation feed can have the same profiles, if we haven’t liked/disliked them yet, hence there’s <code class="language-plaintext highlighter-rouge">already_downloaded</code> state, that will help us to save some time and traffic</p> <p><strong>Note:</strong> Yeah, I know, this should be written with async, but wcyd :)</p> <p>And it seems like we have everything ready to start downloading profiles:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span> <span class="o">=</span> <span class="nf">tinderAPI</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">token</span><span class="p">)</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Start parsing profiles</span><span class="sh">"</span><span class="p">)</span>

<span class="n">already_downloaded</span> <span class="o">=</span> <span class="nf">read_pickle</span><span class="p">(</span><span class="n">profiles_path</span><span class="p">)</span>
<span class="n">bios</span> <span class="o">=</span> <span class="nf">read_pickle</span><span class="p">(</span><span class="n">bios_path</span><span class="p">,</span> <span class="p">{})</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">num_requests</span><span class="p">):</span>
    <span class="n">profiles</span> <span class="o">=</span> <span class="n">api</span><span class="p">.</span><span class="nf">get_profiles</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">profile</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">profiles</span><span class="p">):</span>
        <span class="n">already_downloaded</span> <span class="o">=</span> <span class="n">profile</span><span class="p">.</span><span class="nf">download_photos</span><span class="p">(</span><span class="n">image_dir</span><span class="p">,</span> <span class="n">already_downloaded</span><span class="o">=</span><span class="n">already_downloaded</span><span class="p">)</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">bios</span><span class="p">[</span><span class="n">profile</span><span class="p">.</span><span class="nb">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">profile</span><span class="p">.</span><span class="nf">bio_to_dict</span><span class="p">()</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Saving parsed profiles and bios</span><span class="sh">"</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">bios_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">bios</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">profiles_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">already_downloaded</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">All done!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>While images are slowly but surely downloading, it’s time to think about data labeling: as I intend to classify potential partners with NN-s, I have to provide the training data for it. Unfortunately, I can’t outsource this particular data labeling problem to some strangers on the internet (or can I? Here’s an idea for the project, but I think Zuckerberg <a href="https://en.wikipedia.org/wiki/History_of_Facebook#FaceMash">has done something similar</a> to it already). That means that we have to built some sort of app to do the labeling, as I’m a bit sick of frontend development at the moment, I’ll build a simple desktop app, letting <a href="https://docs.python.org/3/library/tkinter.html">Tkinter</a> to do all the heavy lifting for me.</p> <p>The app is pretty straightforward, we just need to display: name, age, bio and photos; add photo scrolling feature and the ability to like and dislike the profile. Even though I’m not really proficient with tkinter, this sounds like a job that even I would be able to do. After an hour or so, without any help from ChatGPT, I was able to produce something that worked.</p> <p>First, we need to create a canvas, and add some elements to it</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">window</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Tk</span><span class="p">()</span>
<span class="n">window</span><span class="p">.</span><span class="nf">geometry</span><span class="p">(</span><span class="sh">"</span><span class="s">720x1080</span><span class="sh">"</span><span class="p">)</span>

<span class="n">img_lbl</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
<span class="n">img_lbl</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>

<span class="n">name_age</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
<span class="n">name_age</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">relx</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">rely</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>

<span class="n">bio_text</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
<span class="n">bio_text</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">relx</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">rely</span><span class="o">=</span><span class="mf">0.85</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>

<span class="n">btn_like</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Like</span><span class="sh">"</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="sh">"</span><span class="s">green</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">positive</span><span class="p">)</span>
<span class="n">btn_like</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">relx</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">rely</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>

<span class="n">btn_dislike</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Dislike</span><span class="sh">"</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="sh">"</span><span class="s">red</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">negative</span><span class="p">)</span>
<span class="n">btn_dislike</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">relx</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">rely</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>

<span class="n">btn_prev</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Prev Image</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">prev_image</span><span class="p">)</span>
<span class="n">btn_prev</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">relx</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">rely</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>

<span class="n">btn_next</span> <span class="o">=</span> <span class="n">tkinter</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Next Image</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">next_image</span><span class="p">)</span>
<span class="n">btn_next</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">relx</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">rely</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>here you can see three event handlers: <code class="language-plaintext highlighter-rouge">positive</code>, <code class="language-plaintext highlighter-rouge">negative</code>, <code class="language-plaintext highlighter-rouge">prev_image</code> and <code class="language-plaintext highlighter-rouge">next_image</code>, here is how they look like:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">positive</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">current_profile</span>
    <span class="n">labels_</span><span class="p">[</span><span class="n">current_profile</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="nf">next_profile</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">negative</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">current_profile</span>
    <span class="n">labels_</span><span class="p">[</span><span class="n">current_profile</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nf">next_profile</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">next_image</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">profile_images</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">profile_images</span><span class="p">):</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">profile_images</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cnt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nf">display_image</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMAGES_DIR</span><span class="p">,</span> <span class="n">profile_images</span><span class="p">[</span><span class="n">cnt</span><span class="p">]))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">pass</span>


<span class="k">def</span> <span class="nf">prev_image</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">profile_images</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">cnt</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nf">display_image</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMAGES_DIR</span><span class="p">,</span> <span class="n">profile_images</span><span class="p">[</span><span class="n">cnt</span><span class="p">]))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">pass</span>
</code></pre></div></div> <p>As the state we keep track of the current profile, images in that profile and the image that is currently displayed</p> <p><strong>Note:</strong> I know that <code class="language-plaintext highlighter-rouge">global</code> is evil, but it was already 1AM and I didn’t want to spend another hour researching how to manage the state properly. So give me a break, will you</p> <p>Next, we need to display profile images and bio:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">display_image</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">size</span>
    <span class="n">max_height</span> <span class="o">=</span> <span class="mi">800</span>
    <span class="k">if</span> <span class="n">height</span> <span class="o">&gt;</span> <span class="n">max_height</span><span class="p">:</span>
        <span class="n">resize_factor</span> <span class="o">=</span> <span class="n">max_height</span> <span class="o">/</span> <span class="n">height</span>
        <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="nf">resize</span><span class="p">((</span><span class="nf">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">resize_factor</span><span class="p">),</span> <span class="nf">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">resize_factor</span><span class="p">)),</span> <span class="n">resample</span><span class="o">=</span><span class="n">Image</span><span class="p">.</span><span class="n">LANCZOS</span><span class="p">)</span>
    <span class="n">img_tk</span> <span class="o">=</span> <span class="n">ImageTk</span><span class="p">.</span><span class="nc">PhotoImage</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
    <span class="n">img_lbl</span><span class="p">.</span><span class="n">img</span> <span class="o">=</span> <span class="n">img_tk</span>
    <span class="n">img_lbl</span><span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">img_lbl</span><span class="p">.</span><span class="n">img</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">display_bio</span><span class="p">(</span><span class="n">profile_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">bio_text</span><span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="nf">make_pretty_text</span><span class="p">([</span><span class="n">profile_id</span><span class="p">][</span><span class="sh">"</span><span class="s">bio</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">name_age</span><span class="p">.</span><span class="nf">config</span><span class="p">(</span>
            <span class="n">text</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">bios</span><span class="p">[</span><span class="n">profile_id</span><span class="p">][</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">bios</span><span class="p">[</span><span class="n">profile_id</span><span class="p">][</span><span class="sh">'</span><span class="s">age</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">font</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
        <span class="n">bio_text</span><span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">No bio available</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>And finally, let’s add the logic to display next profile as the current one has already been labeled:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">next_profile</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">current_profile</span><span class="p">,</span> <span class="n">profile_images</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">current_profile</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">not_labeled_profiles</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">All images are labeled! Closing the app</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">on_close</span><span class="p">()</span>
    <span class="n">profile_images</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">path</span><span class="p">:</span> <span class="n">path</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">current_profile</span><span class="p">),</span> <span class="n">all_images_</span><span class="p">))</span>
    <span class="nf">next_image</span><span class="p">()</span>
    <span class="nf">display_bio</span><span class="p">(</span><span class="n">current_profile</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tinder_ai/label_app-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tinder_ai/label_app-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tinder_ai/label_app-1400.webp"/> <img src="/assets/img/tinder_ai/label_app.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Labeling app </div> <p>The app doesn’t look particularly good, but it does the job, so I’m more than satisfied with it. One thing that we need to add though, is a handler that will save labeled profiles when the app is closed. Because labels are saved during runtime and not written anywhere yet.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">on_close</span><span class="p">():</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">LABELS_PATH</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">labels_</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="nf">destroy</span><span class="p">()</span>

<span class="c1"># Add this to the canvas definition
</span><span class="n">window</span><span class="p">.</span><span class="nf">protocol</span><span class="p">(</span><span class="sh">"</span><span class="s">WM_DELETE_WINDOW</span><span class="sh">"</span><span class="p">,</span> <span class="n">on_close</span><span class="p">)</span>
<span class="n">window</span><span class="p">.</span><span class="nf">mainloop</span><span class="p">()</span>
</code></pre></div></div> <p>After collecting and labeling somewhere around five hundred profiles (was pretty exhausting actually), we are now ready for the exciting stuff!</p> <h2 id="image-classifier">Image classifier</h2> <p>As a backbone to our robotic eyes I chose <a href="https://arxiv.org/abs/1512.03385">ResNet</a> - it’s relatively cheap, easy and quick to train, and it’s not that much code either, which at this point was a good thing, cause things have already started to look a bit blurry on the edges.</p> <p>ResNet is build of ResBlocks, here it is implemented in pytorch:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ResBlock</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">in_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">conv_1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="n">in_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="n">stride</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="n">padding</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bn_1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">BatchNorm2d</span><span class="p">(</span><span class="n">out_channels</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">relu</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conv_2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="n">out_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bn_2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">BatchNorm2d</span><span class="p">(</span><span class="n">out_channels</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">res_con</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">stride</span> <span class="o">!=</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">in_channels</span> <span class="o">!=</span> <span class="n">out_channels</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">res_con</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">(</span>
                <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="n">in_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="n">stride</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="n">nn</span><span class="p">.</span><span class="nc">BatchNorm2d</span><span class="p">(</span><span class="n">out_channels</span><span class="p">)</span>
            <span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">input_</span> <span class="o">=</span> <span class="n">X</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">bn_1</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv_1</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">bn_2</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv_2</span><span class="p">(</span><span class="n">out</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">res_con</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="nf">res_con</span><span class="p">(</span><span class="n">input_</span><span class="p">)</span>

        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div> <p>You can stack ResBlocks and play with channel configurations to get deeper and wider model. Here is an implementation that can support arbitrary parameters</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ResNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">input_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">layers</span><span class="p">,</span> <span class="n">num_classes</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">hidden_size</span> <span class="o">=</span> <span class="n">out_channels</span>

        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conv_1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span>
            <span class="n">input_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bn_1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">BatchNorm2d</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">relu</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">res_1</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">make_res_block</span><span class="p">(</span><span class="n">out_channels</span><span class="p">,</span> <span class="n">out_channels</span><span class="p">,</span> <span class="n">layers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">res_2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">make_res_block</span><span class="p">(</span><span class="n">out_channels</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="n">layers</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">res_3</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">make_res_block</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">layers</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">res_4</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">make_res_block</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="n">layers</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">avg_pool</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">AdaptiveAvgPool2d</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">flat</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Flatten</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">out</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="n">num_classes</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">make_res_block</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">input_channels</span><span class="p">,</span> <span class="n">output_channels</span><span class="p">,</span> <span class="n">num_blocks</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span>
        <span class="n">strides</span> <span class="o">=</span> <span class="p">[</span><span class="n">stride</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">num_blocks</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">layers</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">stride</span> <span class="ow">in</span> <span class="n">strides</span><span class="p">:</span>
            <span class="n">layers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">ResBlock</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">output_channels</span><span class="p">,</span> <span class="n">stride</span><span class="p">))</span>
            <span class="n">self</span><span class="p">.</span><span class="n">hidden_size</span> <span class="o">=</span> <span class="n">output_channels</span>

        <span class="k">return</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">(</span><span class="o">*</span><span class="n">layers</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">bn_1</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv_1</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>

        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">res_1</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">res_2</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">res_3</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">res_4</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>

        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">avg_pool</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">flat</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">out</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div> <p>I’ll opt out for regular ResNet-50 though. Btw, you can try to fine-tune the pretrained model, e.g. the one that was trained <a href="https://huggingface.co/microsoft/resnet-50">ImageNet</a> or on face-recognition task. We also need a <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">DataLoader</a> with our images</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_images</span><span class="p">(</span>
    <span class="n">data_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
    <span class="n">shuffle</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">num_workers</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="n">transformations</span><span class="p">:</span> <span class="nb">list</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">train_size</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">seed</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">42</span>
<span class="p">):</span>
    <span class="n">transforms</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span><span class="n">transformations</span><span class="p">)</span> <span class="k">if</span> <span class="n">transformations</span> <span class="k">else</span> <span class="bp">None</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="nc">ImageFolder</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">transforms</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">train_size</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">_train_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">*</span> <span class="n">train_size</span><span class="p">)</span>
        <span class="n">_val_size</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="n">_train_size</span>

        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Train dataset size:</span><span class="sh">"</span><span class="p">,</span> <span class="n">_train_size</span><span class="p">,</span> <span class="sh">"</span><span class="s">test dataset size:</span><span class="sh">"</span><span class="p">,</span> <span class="n">_val_size</span><span class="p">)</span>

        <span class="n">gen</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nc">Generator</span><span class="p">().</span><span class="nf">manual_seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
        <span class="n">data_train</span><span class="p">,</span> <span class="n">data_val</span> <span class="o">=</span> <span class="nf">random_split</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">[</span><span class="n">_train_size</span><span class="p">,</span> <span class="n">_val_size</span><span class="p">],</span> <span class="n">generator</span><span class="o">=</span><span class="n">gen</span><span class="p">)</span>

        <span class="nf">return </span><span class="p">(</span>
            <span class="nc">DataLoader</span><span class="p">(</span><span class="n">data_train</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">),</span>
            <span class="nc">DataLoader</span><span class="p">(</span><span class="n">data_val</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="nc">DataLoader</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>
</code></pre></div></div> <p>I trained the model for 100 epochs using <a href="https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html#torch.optim.AdamW">AdamW</a> optimiser, with initial learning rate of 0.1 with <code class="language-plaintext highlighter-rouge">CosineAnnealingLR</code> scheduler and weight decay. I skip boring stuff like some utility functions and training loop, but if you are interested, you can find it <a href="https://github.com/FreedomSlow/tinder_swiper/blob/master/image_classifier.py">here</a></p> <p>Swipy can see, but I’d like to think that there’s something else to the person apart from the looks, so now it’s time to teach it read.</p> <h2 id="profile-description-classifier">Profile description classifier</h2> <p>Inevitably we’ll use some sort of <a href="https://en.wikipedia.org/wiki/Transformer_(machine_learning_model)">transformer</a>, but as I have only 50 euros on my AWS account, and I’m not ready to completely sell my soul to Besos, let’s pick something pretrained and relatively small, so we can fine tune it. The only requirement for the model is to be multilingual - I live in Berlin and people here can speak almost any language, most commonly English and German though. I picked <a href="https://huggingface.co/distilbert-base-multilingual-cased">this</a> Distilbert, which comes with pretrained tokenizer. Distillation is a process of training a small student model, that can imitate the big and expensive teacher model. That results in a bit worse performance, but allows to significantly speed up training and inference.</p> <p>Tinder users utilize various emojis quite heavily. While this adds a nice emotional touch, it will most likely confuse the model, because tokenizer will treat this as unknown token, so I, unfortunately, have to remove them, as well some other unicode characters</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">clean_bios</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">bio_col</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Remove flags, emojis and special symbols from profiles</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">_cleaner</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
        <span class="n">flags</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">u</span><span class="sh">"</span><span class="s">[</span><span class="se">\U0001F1E6</span><span class="s">-</span><span class="se">\U0001F1FF</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>

        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">text</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">emoji</span><span class="p">.</span><span class="n">EMOJI_DATA</span> <span class="ow">and</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">flags</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\u200d</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">text</span>

    <span class="k">return</span> <span class="p">{</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">bio_col</span><span class="si">}</span><span class="s">_clean</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_cleaner</span><span class="p">(</span><span class="n">dataset</span><span class="p">[</span><span class="n">bio_col</span><span class="p">])}</span>
</code></pre></div></div> <p>Now let’s load, clean and tokenize our texts</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dataset_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="n">unlabeled</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">bios</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">labels</span><span class="p">:</span>
        <span class="n">dataset_dict</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="n">dataset_dict</span><span class="p">[</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">k_</span><span class="p">,</span> <span class="n">v_</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dataset_dict</span><span class="p">[</span><span class="n">k_</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">v_</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">unlabeled</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">There are </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">unlabeled</span><span class="p">)</span><span class="si">}</span><span class="s"> unlabeled profiles</span><span class="sh">"</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Load and prep dataset with </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">test_size</span><span class="si">}</span><span class="s"> test size</span><span class="sh">"</span><span class="p">)</span>

<span class="n">bios_dataset</span> <span class="o">=</span> <span class="n">Dataset</span><span class="p">.</span><span class="nf">from_dict</span><span class="p">(</span><span class="n">dataset_dict</span><span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">tokenizer_name</span><span class="p">)</span>
<span class="n">bios_dataset</span> <span class="o">=</span> <span class="nf">prep_data</span><span class="p">(</span><span class="n">bios_dataset</span><span class="p">,</span> <span class="n">tokenizer</span><span class="p">)</span>
<span class="n">bios_dataset</span> <span class="o">=</span> <span class="n">bios_dataset</span><span class="p">.</span><span class="nf">train_test_split</span><span class="p">(</span><span class="n">test_size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">test_size</span><span class="p">)</span>
</code></pre></div></div> <p>I also freeze most of the layers - this will speed up the training significantly</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">layers_to_train</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">distilbert.transformer.layer.5.ffn.lin1.weight</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">distilbert.transformer.layer.5.ffn.lin1.bias</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">distilbert.transformer.layer.5.ffn.lin2.weight</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">distilbert.transformer.layer.5.ffn.lin2.bias</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">distilbert.transformer.layer.5.output_layer_norm.weight</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">distilbert.transformer.layer.5.output_layer_norm.bias</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">pre_classifier.weight</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">pre_classifier.bias</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">classifier.weight</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">classifier.bias</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">]</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">bert</span><span class="p">.</span><span class="nf">named_parameters</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">n</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">layers_to_train</span><span class="p">:</span>
        <span class="n">l</span><span class="p">.</span><span class="n">requires_grad</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div> <p>I fine tune the model for 12,500 steps with the same AdamW optimiser and <code class="language-plaintext highlighter-rouge">5e-4</code> learning rate with <code class="language-plaintext highlighter-rouge">constant_with_warmup</code> scheduler.</p> <p>And I think now we have everything that we need to find love, without almost any effort.</p> <h2 id="making-predictions-and-swiping">Making predictions and swiping</h2> <p>First thing first, we need to extend our <code class="language-plaintext highlighter-rouge">UserProfile</code> and <code class="language-plaintext highlighter-rouge">tinderAPI</code> with like and dislike functionality. Luckily this can be done using the same endpoint</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">like</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">api_url</span><span class="si">}</span><span class="s">/like/</span><span class="si">{</span><span class="n">user_id</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">X-Auth-Token</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_token</span><span class="p">}</span>
    <span class="p">).</span><span class="nf">json</span><span class="p">()</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">match</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">match</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">likes_remaining</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">likes_remaining</span><span class="sh">"</span><span class="p">]</span>
    <span class="p">}</span>

<span class="k">def</span> <span class="nf">dislike</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">api_url</span><span class="si">}</span><span class="s">/pass/</span><span class="si">{</span><span class="n">user_id</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">X-Auth-Token</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_token</span><span class="p">}</span>
        <span class="p">).</span><span class="nf">json</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div> <p>Let’s also retrieve matches that we have so far</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_matches</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">api_url</span><span class="si">}</span><span class="s">/v2/matches?count=</span><span class="si">{</span><span class="n">limit</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">X-Auth-Token</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_token</span><span class="p">}</span>
    <span class="p">).</span><span class="nf">json</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">match</span><span class="p">:</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">match</span><span class="p">[</span><span class="sh">"</span><span class="s">person</span><span class="sh">"</span><span class="p">],</span> <span class="n">self</span><span class="p">),</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">matches</span><span class="sh">"</span><span class="p">]))</span>
</code></pre></div></div> <p>I also want to be able to control Swipy’s vanity, so I write the function that combines images and text scores from models according to the weights</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">make_prediction</span><span class="p">(</span>
    <span class="n">text_preds</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span>
    <span class="n">image_preds</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span>
    <span class="n">text_weight</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
    <span class="n">image_weight</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
    <span class="n">threshold</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="p">):</span>
    <span class="n">total_pred</span> <span class="o">=</span> <span class="n">text_preds</span> <span class="o">*</span> <span class="n">text_weight</span> <span class="o">+</span> <span class="n">image_preds</span> <span class="o">*</span> <span class="n">image_weight</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">total_pred</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>And here is a part of prediction pipeline, I again skip over implementation details that I find tedious, you can find complete inference code <a href="https://github.com/FreedomSlow/tinder_swiper/blob/master/predict.py">here</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Text
</span><span class="n">text_dataset</span> <span class="o">=</span> <span class="n">Dataset</span><span class="p">.</span><span class="nf">from_dict</span><span class="p">(</span><span class="n">profile_info</span><span class="p">)</span>
<span class="n">text_dataset</span> <span class="o">=</span> <span class="nf">prep_data</span><span class="p">(</span><span class="n">text_dataset</span><span class="p">,</span> <span class="n">tokenizer</span><span class="p">,</span> <span class="n">cols_to_drop</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">])</span>
<span class="n">text_preds</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">trainer</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">text_dataset</span><span class="p">).</span><span class="n">predictions</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Images
</span><span class="n">images_dataset</span> <span class="o">=</span> <span class="nf">load_images</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">image_dir</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">transformations</span><span class="o">=</span><span class="p">[</span><span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">()])</span>
<span class="n">image_preds</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">image_model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
<span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">X</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">images_dataset</span><span class="p">:</span>
        <span class="n">image_preds</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="nf">softmax</span><span class="p">(</span><span class="nf">image_model</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)).</span><span class="nf">detach</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()))</span>
<span class="n">image_preds</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">(</span><span class="n">image_preds</span><span class="p">),</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Total predictions
</span><span class="n">preds</span> <span class="o">=</span> <span class="nf">make_prediction</span><span class="p">(</span><span class="n">text_preds</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">bios_weight</span><span class="p">,</span> <span class="n">image_preds</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">image_weight</span><span class="p">)</span>

<span class="c1"># Preds are ordered by id, so we like them if the entry is true in preds
</span><span class="n">liked</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">to_like</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">profile_info</span><span class="p">,</span> <span class="n">preds</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">to_like</span><span class="p">:</span>
        <span class="n">api</span><span class="p">.</span><span class="nf">like</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
        <span class="n">liked</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Liked: </span><span class="si">{</span><span class="n">liked</span><span class="si">}</span><span class="s"> profiles, disliked: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">preds</span><span class="p">)</span> <span class="o">-</span> <span class="n">liked</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Now I can peacefully work, sleep, ski, in a word - do whatever I want, knowing that Swipy will work tirelessly until it finds my future wife or AWS account runs out of money, whichever comes first…</p> <p><a href="https://github.com/FreedomSlow/tinder_swiper">Source code</a></p> <p><strong>Note:</strong> Everything here was done for fun, education and so on, tinder, please, don’t sue me</p> <p><strong>P.S.</strong> If you read this and thought that it was kinda cool, and somehow happen to be a girl - hit me up, who knows, I might still be single ;)</p>]]></content><author><name></name></author><category term="neural-networks,"/><category term="projects"/><category term="neural-networks,"/><category term="python"/><summary type="html"><![CDATA[Once, I had a long weekend with nothing to do. After bingewatching Friends for the 100th time I needed something to overcome the boredom. It’s worth to mention that I was aggressively single back then, so I registered on Tinder, created profile and started swiping. That turned out to be incredibly dull though, so my mind drifted off, and somehow I pressed cmd+r on my keyboard, which, of course, made the page reload. What I found interesting, is that it took forever to load the page; firstly, I blamed this on the german internet, but quick pinging to the closest CDN server showed that my network speed was fine (at least by the german standards). Naturally, I had to understand what caused the pageload to be so slow.]]></summary></entry></feed>